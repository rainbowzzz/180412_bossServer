{"version":3,"sources":["../../db/models.js"],"names":["mongoose","require","connect","useNewUrlParser","conn","connection","on","console","log","userSchema","Schema","username","type","String","required","password","header","post","info","company","salary","UserModel","model","exports","chatSchema","from","to","chat_id","content","read","Boolean","default","create_time","Number","ChatModel"],"mappings":";;AAEA,IAAMA,WAASC,QAAQ,UAAR,CAAf;AACAD,SAASE,OAAT,CAAiB,oCAAjB,EAAuD,EAACC,iBAAiB,IAAlB,EAAvD;AACA,IAAMC,OAAKJ,SAASK,UAApB;AACAD,KAAKE,EAAL,CAAQ,WAAR,EAAoB,YAAI;AACtBC,UAAQC,GAAR,CAAY,UAAZ;AACD,CAFD;AAGA,IAAMC,aAAWT,SAASU,MAAT,CAAgB;AAC/BC,YAAS,EAACC,MAAKC,MAAN,EAAaC,UAAS,IAAtB,EADsB;AAE/BC,YAAS,EAACH,MAAKC,MAAN,EAAaC,UAAS,IAAtB,EAFsB;AAG/BF,QAAK,EAACA,MAAKC,MAAN,EAAaC,UAAS,IAAtB,EAH0B;AAI/BE,UAAQ,EAACJ,MAAMC,MAAP,EAJuB;AAK/BI,QAAM,EAACL,MAAMC,MAAP,EALyB;AAM/BK,QAAM,EAACN,MAAMC,MAAP,EANyB;AAO/BM,WAAS,EAACP,MAAMC,MAAP,EAPsB;AAQ/BO,UAAQ,EAACR,MAAMC,MAAP;AARuB,CAAhB,CAAjB;AAUA,IAAMQ,YAAUrB,SAASsB,KAAT,CAAe,MAAf,EAAsBb,UAAtB,CAAhB;AACAc,QAAQF,SAAR,GAAkBA,SAAlB;;AAGA;AACA,IAAMG,aAAaxB,SAASU,MAAT,CAAgB;AACjCe,QAAM,EAACb,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EAD2B,EACK;AACtCY,MAAI,EAACd,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EAF6B,EAEG;AACpCa,WAAS,EAACf,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EAHwB,EAGQ;AACzCc,WAAS,EAAChB,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EAJwB,EAIQ;AACzCe,QAAM,EAACjB,MAAKkB,OAAN,EAAeC,SAAS,KAAxB,EAL2B,EAKK;AACtCC,eAAa,EAACpB,MAAMqB,MAAP,CAAe;AAAf,GANoB,EAAhB,CAAnB;AAQA;AACA,IAAMC,YAAYlC,SAASsB,KAAT,CAAe,MAAf,EAAuBE,UAAvB,CAAlB;AACA;AACAD,QAAQW,SAAR,GAAoBA,SAApB","file":"models.js","sourcesContent":["\r\n\r\nconst mongoose=require('mongoose');\r\nmongoose.connect('mongodb://localhost:27017/gzhipin1', {useNewUrlParser: true} );\r\nconst conn=mongoose.connection;\r\nconn.on('connected',()=>{\r\n  console.log('数据库连接成功~')\r\n});\r\nconst userSchema=mongoose.Schema({\r\n  username:{type:String,required:true},\r\n  password:{type:String,required:true},\r\n  type:{type:String,required:true},\r\n  header: {type: String},\r\n  post: {type: String},\r\n  info: {type: String},\r\n  company: {type: String},\r\n  salary: {type: String}\r\n})\r\nconst UserModel=mongoose.model('user',userSchema);\r\nexports.UserModel=UserModel;\r\n\r\n\r\n// 定义chats集合的文档结构\r\nconst chatSchema = mongoose.Schema({\r\n  from: {type: String, required: true}, // 发送用户的id\r\n  to: {type: String, required: true}, // 接收用户的id\r\n  chat_id: {type: String, required: true}, // from和to组成的字符串\r\n  content: {type: String, required: true}, // 内容\r\n  read: {type:Boolean, default: false}, // 标识是否已读\r\n  create_time: {type: Number} // 创建时间\r\n})\r\n// 定义能操作chats集合数据的Model\r\nconst ChatModel = mongoose.model('chat', chatSchema)\r\n// 向外暴露Model\r\nexports.ChatModel = ChatModel\r\n\r\n"]}