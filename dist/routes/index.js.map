{"version":3,"sources":["../../routes/index.js"],"names":["express","require","router","Router","md5","UserModel","ChatModel","filter","password","__v","get","req","res","next","render","title","post","body","username","type","findOne","err","user","send","code","msg","create","data","_id","cookie","maxAge","console","log","error","userid","cookies","findByIdAndUpdate","Object","assign","clearCookie","query","find","users","json","userDocs","forEach","doc","header","from","to","chatMsgs","update","read","multi","nModified","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\nvar express = require('express');\nvar router = express.Router();\nconst md5=require('blueimp-md5');\nconst {UserModel,ChatModel}=require('../db/models');\nconst filter={password:0,__v:0}\n\n\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express' });\n});\n/*router.post('/register',function (req,res) {\n  const {username,password,type}=req.body;\n\n\n})*/\nrouter.post('/register',function (req,res) {\n  const {username,password,type}=req.body;\n  UserModel.findOne({username},function (err,user) {\n    if(user){\n      res.send({code:1,msg:\"用户已存在\"})\n    }else {\n\n      UserModel.create({username,type,password:md5(password)},function (err,user) {\n        //\n        const data={username,type,_id:user._id}\n        res.cookie('userid',user._id,{maxAge:1000*60*60*24*7})\n        console.log(user)\n        res.send({code:0,data})\n      })\n\n    }\n  })\n})\n\n\nrouter.post('/login',function (req,res) {\n  const {username,password}=req.body;\n  UserModel.findOne({username,password:md5(password)},filter,function (error,user) {\n    if(user){\n      res.cookie('userid',user._id,{maxAge:1000*60*60*24*7})\n      res.send({code:0,data:user})\n    }else {\n      res.send({code:1,msg:'用户名或密码不正确'})\n    }\n  })\n})\n\n// 更新用户路由\nrouter.post('/update', function (req, res) {\n  // 得到请求cookie的userid\n  const userid = req.cookies.userid\n  if(!userid) {// 如果没有, 说明没有登陆, 直接返回提示\n    return res.send({code: 1, msg: '请先登陆'});\n}\n\n// 更新数据库中对应的数据\nUserModel.findByIdAndUpdate({_id: userid}, req.body, function (err, user) {// user是数据库中原来的数据\n  const {_id, username, type} = user\n  // node端 ...不可用\n  // const data = {...req.body, _id, username, type}\n  // 合并用户信息\n  const data = Object.assign(req.body, {_id, username, type})\n  // assign(obj1, obj2, obj3,...) // 将多个指定的对象进行合并, 返回一个合并后的对象\n  res.send({code: 0, data})\n})\n})\n\n// 根据cookie获取对应的user\nrouter.get('/user', function (req, res) {\n  // 取出cookie中的userid\n  const userid = req.cookies.userid\n  if(!userid) {\n    return res.send({code: 1, msg: '请先登陆'})\n  }\n\n  // 查询对应的user\n  UserModel.findOne({_id: userid}, filter, function (err, user) {\n    if(user){\n      return res.send({code: 0, data: user})\n    }else {\n      res.clearCookie('userid')\n      return res.send({code: 1, msg: '请先登陆'})\n    }\n\n  })\n})\n\nrouter.get('/userlist',function(req, res){\n  const { type } = req.query\n  UserModel.find({type},function(err,users){\n    return res.json({code:0, data: users})\n  })\n})\n\n\n\n\n/*\n获取当前用户所有相关聊天信息列表\n */\nrouter.get('/msglist', function (req, res) {\n  // 获取cookie中的userid\n  const userid = req.cookies.userid\n  // 查询得到所有user文档数组\n  UserModel.find(function (err, userDocs) {\n    // 用对象存储所有user信息: key为user的_id, val为name和header组成的user对象\n    const users = {} // 对象容器\n    userDocs.forEach(doc => {\n      users[doc._id] = {username: doc.username, header: doc.header}\n    })\n    /*\n    查询userid相关的所有聊天信息\n     参数1: 查询条件\n     参数2: 过滤条件\n     参数3: 回调函数\n    */\n    ChatModel.find({'$or': [{from: userid}, {to: userid}]}, filter, function (err, chatMsgs) {\n      // 返回包含所有用户和当前用户相关的所有聊天消息的数据\n      res.send({code: 0, data: {users, chatMsgs}})\n    })\n  })\n})\n\n/*\n修改指定消息为已读\n */\nrouter.post('/readmsg', function (req, res) {\n  // 得到请求中的from和to\n  const from = req.body.from\n  const to = req.cookies.userid\n  /*\n  更新数据库中的chat数据\n  参数1: 查询条件\n  参数2: 更新为指定的数据对象\n  参数3: 是否1次更新多条, 默认只更新一条\n  参数4: 更新完成的回调函数\n   */\n  ChatModel.update({from, to, read: false}, {read: true}, {multi: true}, function (err, doc) {\n    console.log('/readmsg', doc)\n    res.send({code: 0, data: doc.nModified}) // 更新的数量\n  })\n})\n\nmodule.exports = router;\n"]}