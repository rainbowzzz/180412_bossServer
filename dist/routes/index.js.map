{"version":3,"sources":["../../routes/index.js"],"names":["express","require","router","Router","md5","UserModel","filter","password","__v","get","req","res","next","render","title","post","body","username","type","findOne","err","user","send","code","msg","console","log","create","data","_id","error","cookie","maxAge","module","exports"],"mappings":";;AACA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,SAASF,QAAQG,MAAR,EAAb;AACA,IAAMC,MAAIH,QAAQ,aAAR,CAAV;;eACkBA,QAAQ,cAAR,C;IAAXI,S,YAAAA,S;;AACP,IAAMC,SAAO,EAACC,UAAS,CAAV,EAAYC,KAAI;;AAI7B;AAJa,CAAb,CAKAN,OAAOO,GAAP,CAAW,GAAX,EAAgB,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACvCD,MAAIE,MAAJ,CAAW,OAAX,EAAoB,EAAEC,OAAO,SAAT,EAApB;AACD,CAFD;AAGA;;;;;AAKAZ,OAAOa,IAAP,CAAY,WAAZ,EAAwB,UAAUL,GAAV,EAAcC,GAAd,EAAmB;AAAA,kBACVD,IAAIM,IADM;AAAA,MAClCC,QADkC,aAClCA,QADkC;AAAA,MACzBV,QADyB,aACzBA,QADyB;AAAA,MAChBW,IADgB,aAChBA,IADgB;;AAEzCb,YAAUc,OAAV,CAAkB,EAACF,kBAAD,EAAlB,EAA6B,UAAUG,GAAV,EAAcC,IAAd,EAAoB;AAC/C,QAAGA,IAAH,EAAQ;AACNV,UAAIW,IAAJ,CAAS,EAACC,MAAK,CAAN,EAAQC,KAAI,OAAZ,EAAT;AACD,KAFD,MAEM;AACJC,cAAQC,GAAR,CAAY,IAAZ;AACArB,gBAAUsB,MAAV,CAAiB,EAACV,kBAAD,EAAUC,UAAV,EAAeX,UAASH,IAAIG,QAAJ,CAAxB,EAAjB,EAAwD,UAAUa,GAAV,EAAcC,IAAd,EAAoB;AAC1E;AACA,YAAMO,OAAK,EAACX,kBAAD,EAAUC,UAAV,EAAeW,KAAIR,KAAKQ,GAAxB,EAAX;AACAJ,gBAAQC,GAAR,CAAYL,IAAZ;AACAV,YAAIW,IAAJ,CAAS,EAACC,MAAK,CAAN,EAAQK,UAAR,EAAT;AACD,OALD;AAME;AACH;AACF,GAbD;AAcD,CAhBD;;AAmBA1B,OAAOa,IAAP,CAAY,QAAZ,EAAqB,UAAUL,GAAV,EAAcC,GAAd,EAAmB;AAAA,mBACZD,IAAIM,IADQ;AAAA,MAC/BC,QAD+B,cAC/BA,QAD+B;AAAA,MACtBV,QADsB,cACtBA,QADsB;;AAEtCF,YAAUc,OAAV,CAAkB,EAACF,kBAAD,EAAUV,UAASH,IAAIG,QAAJ,CAAnB,EAAlB,EAAoDD,MAApD,EAA2D,UAAUwB,KAAV,EAAgBT,IAAhB,EAAsB;AAC/E,QAAGA,IAAH,EAAQ;AACNV,UAAIoB,MAAJ,CAAW,QAAX,EAAoBV,KAAKQ,GAAzB,EAA6B,EAACG,QAAO,OAAK,EAAL,GAAQ,EAAR,GAAW,EAAX,GAAc,CAAtB,EAA7B;AACArB,UAAIW,IAAJ,CAAS,EAACC,MAAK,CAAN,EAAQK,MAAKP,IAAb,EAAT;AACD,KAHD,MAGM;AACJV,UAAIW,IAAJ,CAAS,EAACC,MAAK,CAAN,EAAQC,KAAI,WAAZ,EAAT;AACD;AACF,GAPD;AAQD,CAVD;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCAS,OAAOC,OAAP,GAAiBhC,MAAjB","file":"index.js","sourcesContent":["\nvar express = require('express');\nvar router = express.Router();\nconst md5=require('blueimp-md5');\nconst {UserModel}=require('../db/models');\nconst filter={password:0,__v:0}\n\n\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express' });\n});\n/*router.post('/register',function (req,res) {\n  const {username,password,type}=req.body;\n\n\n})*/\nrouter.post('/register',function (req,res) {\n  const {username,password,type}=req.body;\n  UserModel.findOne({username},function (err,user) {\n    if(user){\n      res.send({code:1,msg:\"用户已存在\"})\n    }else {\n      console.log(1111)\n      UserModel.create({username,type,password:md5(password)},function (err,user) {\n        // res.cookie('userid',user._id,{maxAge:1000*60*60*24*7})\n        const data={username,type,_id:user._id}\n        console.log(user)\n        res.send({code:0,data})\n      })\n        /*res.cookie('userid',user._id,{maxAge:1000*60*60*24*7})*/\n    }\n  })\n})\n\n\nrouter.post('/login',function (req,res) {\n  const {username,password}=req.body;\n  UserModel.findOne({username,password:md5(password)},filter,function (error,user) {\n    if(user){\n      res.cookie('userid',user._id,{maxAge:1000*60*60*24*7})\n      res.send({code:0,data:user})\n    }else {\n      res.send({code:1,msg:'用户名或密码不正确'})\n    }\n  })\n})\n/*router.post('/register', function (req, res) {\n  // 读取请求参数数据\n  const {username, password, type} = req.body\n  // 处理: 判断用户是否已经存在, 如果存在, 返回提示错误的信息, 如果不存在, 保存\n  // 查询(根据username)\n  UserModel.findOne({username}, function (err, user) {\n    // 如果user有值(已存在)\n    if(user) {\n      // 返回提示错误的信息\n      res.send({code: 1, msg: '此用户已存在'})\n    } else { // 没值(不存在)\n      // 保存\n      new UserModel({username, type, password:md5(password)}).save(function (error, user) {\n\n        // 生成一个cookie(userid: user._id), 并交给浏览器保存\n        res.cookie('userid', user._id, {maxAge: 1000*60*60*24})\n        // 返回包含user的json数据\n        const data = {username, type, _id: user._id} // 响应数据中不要携带password\n        res.send({code: 0, data})\n      })\n    }\n  })\n  // 返回响应数据\n})\n\n// 登陆的路由\nrouter.post('/login', function (req, res) {\n  const {username, password} = req.body\n  // 根据username和password查询数据库users, 如果没有, 返回提示错误的信息, 如果有, 返回登陆成功信息(包含user)\n  UserModel.findOne({username, password:md5(password)}, filter, function (err, user) {\n    if(user) { // 登陆成功\n      // 生成一个cookie(userid: user._id), 并交给浏览器保存\n      res.cookie('userid', user._id, {maxAge: 1000*60*60*24})\n      // 返回登陆成功信息(包含user)\n      res.send({code: 0, data: user})\n    } else {// 登陆失败\n      res.send({code: 1, msg: '用户名或密码不正确!'})\n    }\n  })\n})*/\n\nmodule.exports = router;\n"]}